{"ast":null,"code":"// import axios from 'axios';\n\n// const BASE_URL = 'http://localhost:5000/api/auth';\n\n// // ✅ Register new user\n// export const registerUser = async (data) => {\n//   try {\n//     const res = await axios.post(`${BASE_URL}/register`, data);\n//     localStorage.setItem('token', res.data.token);\n//     return true;\n//   } catch (err) {\n//     alert(err.response?.data?.message || \"Registration failed\");\n//     return false;\n//   }\n// };\n\n// // ✅ Login user\n// export const loginUser = async (data) => {\n//   try {\n//     const res = await axios.post(`${BASE_URL}/login`, data);\n//     localStorage.setItem('token', res.data.token);\n//     return true;\n//   } catch (err) {\n//     alert(err.response?.data?.message || \"Login failed\");\n//     return false;\n//   }\n// };\n\n// // ✅ Request password reset (Forgot Password)\n// export const requestPasswordReset = async (email) => {\n//   try {\n//     const res = await axios.post(`${BASE_URL}/forgot-password`, { email });\n//     return res.data; // you can show success message to user\n//   } catch (err) {\n//     throw new Error(err.response?.data?.message || 'Failed to request password reset');\n//   }\n// };\n\nimport axios from 'axios';\nconst BASE_URL = 'http://localhost:5000/api/auth';\nexport const registerUser = async data => {\n  try {\n    const res = await axios.post(`${BASE_URL}/register`, data);\n    const {\n      token,\n      userId\n    } = res.data;\n    localStorage.setItem('token', token);\n    localStorage.setItem('userId', userId);\n    return true;\n  } catch (err) {\n    var _err$response, _err$response$data;\n    alert(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || \"Registration failed\");\n    return false;\n  }\n};\nexport const loginUser = async data => {\n  try {\n    const res = await axios.post(`${BASE_URL}/login`, data);\n    const {\n      token,\n      userId\n    } = res.data;\n    localStorage.setItem('token', token);\n    localStorage.setItem('userId', userId);\n    return true;\n  } catch (err) {\n    var _err$response2, _err$response2$data;\n    alert(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || \"Login failed\");\n    return false;\n  }\n};","map":{"version":3,"names":["axios","BASE_URL","registerUser","data","res","post","token","userId","localStorage","setItem","err","_err$response","_err$response$data","alert","response","message","loginUser","_err$response2","_err$response2$data"],"sources":["C:/Users/Sravy/Desktop/meal-bridge/client/src/api/auth.js"],"sourcesContent":["\r\n// import axios from 'axios';\r\n\r\n// const BASE_URL = 'http://localhost:5000/api/auth';\r\n\r\n// // ✅ Register new user\r\n// export const registerUser = async (data) => {\r\n//   try {\r\n//     const res = await axios.post(`${BASE_URL}/register`, data);\r\n//     localStorage.setItem('token', res.data.token);\r\n//     return true;\r\n//   } catch (err) {\r\n//     alert(err.response?.data?.message || \"Registration failed\");\r\n//     return false;\r\n//   }\r\n// };\r\n\r\n// // ✅ Login user\r\n// export const loginUser = async (data) => {\r\n//   try {\r\n//     const res = await axios.post(`${BASE_URL}/login`, data);\r\n//     localStorage.setItem('token', res.data.token);\r\n//     return true;\r\n//   } catch (err) {\r\n//     alert(err.response?.data?.message || \"Login failed\");\r\n//     return false;\r\n//   }\r\n// };\r\n\r\n// // ✅ Request password reset (Forgot Password)\r\n// export const requestPasswordReset = async (email) => {\r\n//   try {\r\n//     const res = await axios.post(`${BASE_URL}/forgot-password`, { email });\r\n//     return res.data; // you can show success message to user\r\n//   } catch (err) {\r\n//     throw new Error(err.response?.data?.message || 'Failed to request password reset');\r\n//   }\r\n// };\r\n\r\n\r\nimport axios from 'axios';\r\n\r\nconst BASE_URL = 'http://localhost:5000/api/auth';\r\n\r\nexport const registerUser = async (data) => {\r\n  try {\r\n    const res = await axios.post(`${BASE_URL}/register`, data);\r\n    const { token, userId } = res.data;\r\n    localStorage.setItem('token', token);\r\n    localStorage.setItem('userId', userId);\r\n    return true;\r\n  } catch (err) {\r\n    alert(err.response?.data?.message || \"Registration failed\");\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const loginUser = async (data) => {\r\n  try {\r\n    const res = await axios.post(`${BASE_URL}/login`, data);\r\n    const { token, userId } = res.data;\r\n    localStorage.setItem('token', token);\r\n    localStorage.setItem('userId', userId);\r\n    return true;\r\n  } catch (err) {\r\n    alert(err.response?.data?.message || \"Login failed\");\r\n    return false;\r\n  }\r\n};\r\n"],"mappings":"AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAG,gCAAgC;AAEjD,OAAO,MAAMC,YAAY,GAAG,MAAOC,IAAI,IAAK;EAC1C,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,QAAQ,WAAW,EAAEE,IAAI,CAAC;IAC1D,MAAM;MAAEG,KAAK;MAAEC;IAAO,CAAC,GAAGH,GAAG,CAACD,IAAI;IAClCK,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,KAAK,CAAC;IACpCE,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEF,MAAM,CAAC;IACtC,OAAO,IAAI;EACb,CAAC,CAAC,OAAOG,GAAG,EAAE;IAAA,IAAAC,aAAA,EAAAC,kBAAA;IACZC,KAAK,CAAC,EAAAF,aAAA,GAAAD,GAAG,CAACI,QAAQ,cAAAH,aAAA,wBAAAC,kBAAA,GAAZD,aAAA,CAAcR,IAAI,cAAAS,kBAAA,uBAAlBA,kBAAA,CAAoBG,OAAO,KAAI,qBAAqB,CAAC;IAC3D,OAAO,KAAK;EACd;AACF,CAAC;AAED,OAAO,MAAMC,SAAS,GAAG,MAAOb,IAAI,IAAK;EACvC,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMJ,KAAK,CAACK,IAAI,CAAC,GAAGJ,QAAQ,QAAQ,EAAEE,IAAI,CAAC;IACvD,MAAM;MAAEG,KAAK;MAAEC;IAAO,CAAC,GAAGH,GAAG,CAACD,IAAI;IAClCK,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,KAAK,CAAC;IACpCE,YAAY,CAACC,OAAO,CAAC,QAAQ,EAAEF,MAAM,CAAC;IACtC,OAAO,IAAI;EACb,CAAC,CAAC,OAAOG,GAAG,EAAE;IAAA,IAAAO,cAAA,EAAAC,mBAAA;IACZL,KAAK,CAAC,EAAAI,cAAA,GAAAP,GAAG,CAACI,QAAQ,cAAAG,cAAA,wBAAAC,mBAAA,GAAZD,cAAA,CAAcd,IAAI,cAAAe,mBAAA,uBAAlBA,mBAAA,CAAoBH,OAAO,KAAI,cAAc,CAAC;IACpD,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}